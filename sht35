#!/usr/bin/env python3.5
#
# This file is part of sht35d.
#
# sht35d is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# sht35d is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with vaisalad.  If not, see <http://www.gnu.org/licenses/>.

"""Commandline client for querying the latest measurement from sht35d"""

import datetime
import json
import os
import sys
import Pyro4
from warwick.observatory.common import daemons

# pylint: disable=invalid-name

SCRIPT_NAME = os.path.basename(sys.argv[0])
sys.excepthook = Pyro4.util.excepthook

FMT_RED = u'\033[91m'
FMT_BOLD = u'\033[1m'
FMT_CLEAR = u'\033[0m'


def run_command(command):
    """Prints the message associated with a status code and returns the code"""
    try:
        ret = command()
    except Pyro4.errors.CommunicationError:
        print('error: unable to communicate with the sht35 daemon')
        ret = 1

    return ret


def print_status():
    """Prints the latest sensor data in human-readable form"""
    with daemons.rasa_internal_environment.connect() as sensor:
        latest = sensor.last_measurement()

    if latest is not None:
        date = datetime.datetime.strptime(latest['date'], '%Y-%m-%dT%H:%M:%SZ')
        print('Data received ' + FMT_BOLD + str(date) + FMT_CLEAR)
        print('   Temperature: ' + format_value(latest['temperature'],
                                                latest['temperature_valid'], '\u00B0C'))
        print(' Rel. Humidity: ' + format_value(latest['relative_humidity'],
                                                latest['relative_humidity_valid'], ' %RH'))
        print()
    else:
        print('error: no data available')
        return 1

    return 0


def format_value(data, valid, suffix=''):
    """Builds a formatted string with a value"""
    ret = FMT_BOLD + str(data) + suffix
    if not valid:
        ret += FMT_RED + ' (INVALID)'
    ret += FMT_CLEAR
    return ret


def print_json():
    """Prints the latest sensor data in machine-readable form"""
    with daemons.rasa_internal_environment.connect() as sensor:
        latest = sensor.last_measurement()

    print(json.dumps(latest or {}))
    return 0


def print_usage():
    """Prints the utility help"""
    print('Usage: {} <command>'.format(SCRIPT_NAME))
    print()
    print('   status      print a human-readable summary of the Vaisala status')
    print('   json        print a machine-readable summary of the Vaisala status')
    print()

    return 1


if __name__ == '__main__':
    if len(sys.argv) < 2:
        sys.exit(print_usage())

    commands = {
        'status': print_status,
        'json': print_json,
    }

    if sys.argv[1] not in commands:
        sys.exit(print_usage())

    sys.exit(run_command(commands[sys.argv[1]]))
