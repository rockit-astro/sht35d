#!/usr/bin/env python3.5
#
# This file is part of sht35d.
#
# sht35d is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# sht35d is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with vaisalad.  If not, see <http://www.gnu.org/licenses/>.

"""sht35 temperature/humidity daemon for the RASA prototype telescope"""

# pylint: disable=broad-except
# pylint: disable=invalid-name
# pylint: disable=too-many-arguments
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-few-public-methods

import datetime
import math
import threading
import time
import Pyro4
import smbus
from warwick.observatory.common import daemons, log


def dew_point(temperature, humidity):
    """Calculates the dew point using the equation defined by the Vaisala manual"""
    a = math.log(100 / humidity)
    b = 15 * a - 2.1 * temperature + 2711.5
    c = temperature + 273.16
    return c * b / (c * a / 2 + b) - 273.16


def crc(data):
    val = 0xff
    for s in data:
        val ^= s
        for _ in range(8):
            val = (val << 1) ^ 0x131 if val & 0x80 else val << 1
    return val


class SHT35Daemon:
    """Daemon class that wraps the I2C interface"""
    def __init__(self):
        self._lock = threading.Lock()
        self._running = True
        self._latest = None
        self._i2c = None
        self._i2c_error = False

        runloop = threading.Thread(target=self.run)
        runloop.daemon = True
        runloop.start()

    def run(self):
        """Main run loop"""
        while self._running:
            try:
                self._i2c = smbus.SMBus(1)

                print('Connected to i2c')
                prefix = 'Restored' if self._i2c_error else 'Established'
                log.info('rasa_sht35d', prefix + ' i2c connection to SHT35 sensor')
                self._i2c_error = False
            except Exception as exception:
                print(exception)
                print('Will retry in 10 seconds...')
                if not self._i2c_error:
                    log.error('rasa_sht35d', 'Failed to connect to SHT35 sensor')

                self._i2c_error = True

                time.sleep(10.)
                continue

            try:
                self._latest = None

                # Main run loop
                while self._running:
                    # Request a measurement: high repeatability, no clock stretching
                    self._i2c.write_i2c_block_data(0x45, 0x24, [0x00])

                    # Wait for measurement to complete
                    time.sleep(0.016)

                    # Read data and convert to degrees / percent based on data sheet formula
                    data = self._i2c.read_i2c_block_data(0x45, 0x00, 6)
                    temperature = 175 * (data[0] * 256 + data[1]) / 65535. - 45
                    temperature_valid = data[2] == crc(data[:2])
                    humidity = 100 * (data[3] * 256 + data[4]) / 65535.
                    humidity_valid = data[5] == crc(data[3:5])

                    with self._lock:
                        self._latest = {
                            'date': datetime.datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%SZ'),
                            'temperature': round(temperature, 1),
                            'temperature_valid': temperature_valid,
                            'relative_humidity': round(humidity, 1),
                            'relative_humidity_valid': humidity_valid,
                            'dew_point_delta': round(dew_point(temperature, humidity), 1),
                            'dew_point_delta_valid': temperature_valid and humidity_valid
                        }

            except Exception as exception:
                print(exception)
                print('Will retry in 10 seconds...')
                if not self._i2c_error:
                    log.error('rasa_sht35d', 'Lost serial connection to SHT35 sensor')
                self._i2c_error = True
                time.sleep(10.)

    @Pyro4.expose
    def last_measurement(self):
        """Query the latest valid measurement."""
        with self._lock:
            return self._latest


if __name__ == '__main__':
    daemons.rasa_internal_environment.launch(SHT35Daemon())
